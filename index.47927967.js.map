{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/scripts/swipeHandler.js","src/scripts/updateField.js","src/modules/Game.class.js"],"sourcesContent":["let $9cbb1714ec9e8e06$var$startX, $9cbb1714ec9e8e06$var$startY, $9cbb1714ec9e8e06$var$endX, $9cbb1714ec9e8e06$var$endY;\nconst $9cbb1714ec9e8e06$var$minDistance = 15;\nfunction $9cbb1714ec9e8e06$export$37cbf11924865552(e) {\n    e.preventDefault();\n    const touch = e.touches[0];\n    $9cbb1714ec9e8e06$var$startX = touch.pageX;\n    $9cbb1714ec9e8e06$var$startY = touch.pageY;\n}\nfunction $9cbb1714ec9e8e06$export$79b4bc20f2630414(e) {\n    const touch = e.changedTouches[0];\n    $9cbb1714ec9e8e06$var$endX = touch.pageX;\n    $9cbb1714ec9e8e06$var$endY = touch.pageY;\n    const deltaX = $9cbb1714ec9e8e06$var$endX - $9cbb1714ec9e8e06$var$startX;\n    const deltaY = $9cbb1714ec9e8e06$var$endY - $9cbb1714ec9e8e06$var$startY;\n    if (Math.abs(deltaX) > Math.abs(deltaY)) {\n        if (deltaX > $9cbb1714ec9e8e06$var$minDistance) {\n            e.key = \"ArrowRight\";\n            return e;\n        }\n        if (deltaX < -$9cbb1714ec9e8e06$var$minDistance) {\n            e.key = \"ArrowLeft\";\n            return e;\n        }\n    }\n    if (deltaY > $9cbb1714ec9e8e06$var$minDistance) {\n        e.key = \"ArrowDown\";\n        return e;\n    }\n    if (deltaY < -$9cbb1714ec9e8e06$var$minDistance) {\n        e.key = \"ArrowUp\";\n        return e;\n    }\n}\n\n\nconst $8dc80960c42854d7$export$b5210707f4c816dc = document.querySelector(\".game-field tbody\");\nconst $8dc80960c42854d7$var$DIRECTIONS = {\n    left: (prevState, state)=>$8dc80960c42854d7$var$moveLeft(prevState, state),\n    right: (prevState, state)=>$8dc80960c42854d7$var$moveRight(prevState, state),\n    up: (prevState, state)=>$8dc80960c42854d7$var$moveUp(prevState, state),\n    down: (prevState, state)=>$8dc80960c42854d7$var$moveDown(prevState, state)\n};\nlet $8dc80960c42854d7$var$lastChange = null;\nlet $8dc80960c42854d7$var$lastTimeout = null;\nconst $8dc80960c42854d7$var$ANIMATION_DURATION = 250;\nfunction $8dc80960c42854d7$export$792a18290d173848(state, direction) {\n    if ($8dc80960c42854d7$var$lastChange) {\n        if (!$8dc80960c42854d7$export$3a85b3f4caf02b6f($8dc80960c42854d7$var$lastChange, state)) return;\n        clearTimeout($8dc80960c42854d7$var$lastTimeout);\n        $8dc80960c42854d7$var$clearField();\n        $8dc80960c42854d7$var$fillField($8dc80960c42854d7$var$lastChange);\n        $8dc80960c42854d7$var$lastChange = null;\n        $8dc80960c42854d7$var$lastTimeout = null;\n    }\n    const changes = [\n        $8dc80960c42854d7$var$createCopy($8dc80960c42854d7$var$clearField())\n    ];\n    if (!$8dc80960c42854d7$export$3a85b3f4caf02b6f(changes[0], state)) {\n        $8dc80960c42854d7$var$fillField(state);\n        return;\n    }\n    if (direction) {\n        while(true){\n            changes.push($8dc80960c42854d7$var$createCopy($8dc80960c42854d7$var$DIRECTIONS[direction]($8dc80960c42854d7$var$createCopy(changes.at(-1)), state)));\n            if (!$8dc80960c42854d7$export$3a85b3f4caf02b6f(changes.at(-1), changes.at(-2))) {\n                changes.pop();\n                changes.shift();\n                changes[changes.length - 1] = state;\n                break;\n            }\n        }\n        $8dc80960c42854d7$var$lastChange = state;\n        $8dc80960c42854d7$var$addChanges(changes, $8dc80960c42854d7$var$ANIMATION_DURATION / changes.length);\n        return;\n    }\n    $8dc80960c42854d7$var$fillField(state);\n}\nfunction $8dc80960c42854d7$export$3a85b3f4caf02b6f(prevState, state) {\n    for(let i = 0; i < prevState.length; i++)for(let j = 0; j < prevState[i].length; j++){\n        if (prevState[i][j] !== state[i][j]) return true;\n    }\n    return false;\n}\nfunction $8dc80960c42854d7$var$createCopy(state) {\n    return state.map((row)=>[\n            ...row\n        ]);\n}\nfunction $8dc80960c42854d7$var$addChanges(changes, duration) {\n    $8dc80960c42854d7$var$clearField();\n    $8dc80960c42854d7$var$fillField(changes.shift());\n    if (changes.length) {\n        $8dc80960c42854d7$var$lastTimeout = setTimeout($8dc80960c42854d7$var$addChanges, duration, changes, duration);\n        return;\n    }\n    $8dc80960c42854d7$var$lastChange = null;\n    $8dc80960c42854d7$var$lastTimeout = null;\n}\nfunction $8dc80960c42854d7$var$fillField(state) {\n    for(let i = 0; i < state.length; i++){\n        const row = state[i];\n        for(let j = 0; j < row.length; j++)if (state[i][j]) {\n            $8dc80960c42854d7$export$b5210707f4c816dc.rows[i].cells[j].textContent = state[i][j];\n            $8dc80960c42854d7$export$b5210707f4c816dc.rows[i].cells[j].classList.add(`field-cell--${state[i][j]}`);\n        }\n    }\n}\nfunction $8dc80960c42854d7$var$moveLeft(prevState, state) {\n    for(let i = 0; i < prevState.length; i++){\n        const row = prevState[i];\n        const end = row.length - 1;\n        let count = 0;\n        let next = false;\n        for(let j = 0; j < end && !next; j++){\n            if (j === count && row[j] === state[i][j]) {\n                count++;\n                continue;\n            }\n            if (!row[j]) {\n                next = true;\n                row.splice(j, 1);\n                row.push(0);\n                continue;\n            }\n            if (row[j + 1] && row[j] === row[j + 1]) {\n                next = true;\n                row[j] = +row[j] * 2;\n                row.splice(j + 1, 1);\n                row.push(0);\n            }\n        }\n    }\n    return prevState;\n}\nfunction $8dc80960c42854d7$var$moveRight(prevState, state) {\n    for(let i = 0; i < prevState.length; i++){\n        const row = prevState[i];\n        let next = false;\n        let count = row.length - 1;\n        for(let j = row.length - 1; j > 0 && !next; j--){\n            if (j === count && row[j] === state[i][j]) {\n                count--;\n                continue;\n            }\n            if (!row[j]) {\n                next = true;\n                row.splice(j, 1);\n                row.unshift(0);\n                continue;\n            }\n            if (row[j - 1] && row[j] === row[j - 1]) {\n                next = true;\n                row[j] = +row[j] * 2;\n                row.splice(j - 1, 1);\n                row.unshift(0);\n            }\n        }\n    }\n    return prevState;\n}\nfunction $8dc80960c42854d7$var$moveUp(prevState, state) {\n    for(let j = 0; j < prevState.length; j++){\n        const end = prevState.length - 1;\n        let count = 0;\n        let next = false;\n        for(let i = 0; i < end && !next; i++){\n            if (i === count && prevState[i][j] === state[i][j]) {\n                count++;\n                continue;\n            }\n            if (!prevState[i][j]) {\n                next = true;\n                $8dc80960c42854d7$var$removeUp(prevState, i, j);\n                continue;\n            }\n            if (prevState[i + 1][j] && prevState[i][j] === prevState[i + 1][j]) {\n                prevState[i][j] *= 2;\n                next = true;\n                $8dc80960c42854d7$var$removeUp(prevState, i + 1, j);\n            }\n        }\n    }\n    return prevState;\n}\nfunction $8dc80960c42854d7$var$moveDown(prevState, state) {\n    for(let j = 0; j < prevState.length; j++){\n        let next = false;\n        let count = prevState.length - 1;\n        for(let i = prevState.length - 1; i > 0 && !next; i--){\n            if (count === i && prevState[i][j] === state[i][j]) {\n                count--;\n                continue;\n            }\n            if (!prevState[i][j]) {\n                next = true;\n                $8dc80960c42854d7$var$removeDown(prevState, i, j);\n                continue;\n            }\n            if (prevState[i - 1][j] && prevState[i][j] === prevState[i - 1][j]) {\n                prevState[i][j] = +prevState[i][j] * 2;\n                next = true;\n                $8dc80960c42854d7$var$removeDown(prevState, i - 1, j);\n            }\n        }\n    }\n    return prevState;\n}\nfunction $8dc80960c42854d7$var$removeUp(prevState, init, j) {\n    const end = prevState.length - 1;\n    for(let i = init; i < end; i++)prevState[i][j] = prevState[i + 1][j];\n    prevState[end][j] = 0;\n}\nfunction $8dc80960c42854d7$var$removeDown(prevState, init, j) {\n    for(let i = init; i > 0; i--)prevState[i][j] = prevState[i - 1][j];\n    prevState[0][j] = 0;\n}\nfunction $8dc80960c42854d7$var$clearField() {\n    const state = [];\n    for(let i = 0; i < $8dc80960c42854d7$export$b5210707f4c816dc.rows.length; i++){\n        state.push([]);\n        const row = $8dc80960c42854d7$export$b5210707f4c816dc.rows[i].cells;\n        for(let j = 0; j < row.length; j++){\n            state[i].push(+row[j].textContent);\n            if (row[j].textContent) {\n                row[j].classList.remove(`field-cell--${row[j].textContent}`);\n                row[j].textContent = \"\";\n            }\n        }\n    }\n    return state;\n}\n\n\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    size = 4;\n    probability = 10;\n    status = {\n        started: false,\n        lost: false,\n        won: false\n    };\n    score = 0;\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState = this.createField()){\n        this.state = initialState;\n        this.initialState = this.copyState(initialState);\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        if (this.isPlaying) return;\n        this.status.started = true;\n        for(let _ = 0; _ < 2; _++)this.addRandomCell();\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.score = 0;\n        this.state = this.copyState(this.initialState);\n        this.status.won = false;\n        this.status.lost = false;\n        this.status.started = false;\n    }\n    // #region moves logic\n    moveRow(callback) {\n        if (!this.isPlaying) return;\n        const prevState = this.getState();\n        for(let i = 0; i < this.size; i++)this.state[i] = this.stackRow(this.state[i], callback);\n        if (this.isChanged(prevState)) {\n            this.addRandomCell();\n            this.status.lost = this.isLost;\n        }\n    }\n    moveColumn(callback) {\n        if (!this.isPlaying) return;\n        const prevState = this.getState();\n        for(let j = 0; j < this.size; j++){\n            const column = this.stackRow(this.state.map((row)=>row[j]), callback);\n            column.forEach((cell, i)=>this.state[i][j] = cell);\n        }\n        if (this.isChanged(prevState)) {\n            this.addRandomCell();\n            this.status.lost = this.isLost;\n        }\n    }\n    stackRow(initialRow, fillCallback) {\n        const row = initialRow.filter(Boolean);\n        for(let j = 1; j < row.length; j++)if (row[j - 1] === row[j]) {\n            const score = row[j - 1] * 2;\n            if (score === 2048) this.status.won = true;\n            row[j - 1] = score;\n            this.score += score;\n            row.splice(j, 1);\n        }\n        while(row.length !== this.size)fillCallback(row);\n        return row;\n    }\n    // #endregion\n    // #region moves directions\n    moveLeft() {\n        this.moveRow((row)=>row.push(0));\n    }\n    moveRight() {\n        this.moveRow((row)=>row.unshift(0));\n    }\n    moveUp() {\n        this.moveColumn((column)=>column.push(0));\n    }\n    moveDown() {\n        this.moveColumn((column)=>column.unshift(0));\n    }\n    // #endregion\n    // #region utils\n    createField() {\n        return new Array(this.size).fill(null).map(()=>new Array(this.size).fill(0));\n    }\n    copyState(state) {\n        return state.map((row)=>[\n                ...row\n            ]);\n    }\n    isChanged(prevState) {\n        for(let i = 0; i < this.size; i++)for(let j = 0; j < this.size; j++){\n            if (prevState[i][j] !== this.state[i][j]) return true;\n        }\n        return false;\n    }\n    get isPlaying() {\n        switch(true){\n            case !this.status.started:\n            case this.status.won:\n            case this.status.lost:\n                return false;\n            default:\n                return true;\n        }\n    }\n    get isLost() {\n        for(let i = 0; i < this.size; i++){\n            const column = this.state.map((row)=>row[i]);\n            if (this.hasMoves(this.state[i]) || this.hasMoves(column)) return false;\n        }\n        return true;\n    }\n    hasMoves(row) {\n        if (row.includes(0)) return true;\n        for(let i = 1; i < row.length; i++){\n            if (row[i - 1] === row[i]) return true;\n        }\n        return false;\n    }\n    // #endregion\n    // #region add random cell\n    addRandomCell() {\n        const i = this.getRandomRow();\n        const j = this.getRandomColumn(i);\n        this.state[i][j] = !$a5fd07fa01589658$var$getRandomNumber(0, this.probability) ? 4 : 2;\n    }\n    getRandomRow() {\n        const rows = [];\n        for(let i = 0; i < this.size; i++)if (this.state[i].includes(0)) rows.push(i);\n        return rows[$a5fd07fa01589658$var$getRandomNumber(0, rows.length)];\n    }\n    getRandomColumn(i) {\n        const columns = [];\n        const row = this.state[i];\n        for(let j = 0; j < row.length; j++)if (!row[j]) columns.push(j);\n        return columns[$a5fd07fa01589658$var$getRandomNumber(0, columns.length)];\n    }\n    // #endregion\n    // #region getters\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.copyState(this.state);\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        switch(true){\n            case !this.status.started:\n                return \"idle\";\n            case this.status.won:\n                return \"win\";\n            case this.status.lost:\n                return \"lose\";\n        }\n        return \"playing\";\n    }\n}\nfunction $a5fd07fa01589658$var$getRandomNumber(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$gameScore = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".button.start\");\nconst $09e991522ca7e64e$var$winMessage = document.querySelector(\".message.message-win\");\nconst $09e991522ca7e64e$var$loseMessage = document.querySelector(\".message.message-lose\");\nconst $09e991522ca7e64e$var$startMessage = document.querySelector(\".message.message-start\");\nfunction $09e991522ca7e64e$var$touchMovesListener(e) {\n    const result = (0, $9cbb1714ec9e8e06$export$79b4bc20f2630414)(e);\n    if (result) $09e991522ca7e64e$var$movesListener(result);\n}\nfunction $09e991522ca7e64e$var$movesListener(e) {\n    const prevState = $09e991522ca7e64e$var$game.getState();\n    switch(e.key){\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        default:\n            return;\n    }\n    if ($09e991522ca7e64e$var$startButton.classList.contains(\"start\") && (0, $8dc80960c42854d7$export$3a85b3f4caf02b6f)(prevState, $09e991522ca7e64e$var$game.getState())) {\n        $09e991522ca7e64e$var$startButton.disabled = false;\n        $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n        $09e991522ca7e64e$var$startButton.classList.add(\"restart\");\n        $09e991522ca7e64e$var$startButton.classList.remove(\"start\");\n    }\n    $09e991522ca7e64e$var$gameScore.textContent = $09e991522ca7e64e$var$game.getScore();\n    (0, $8dc80960c42854d7$export$792a18290d173848)($09e991522ca7e64e$var$game.getState(), e.key.replace(\"Arrow\", \"\").toLowerCase());\n    const gameStatus = $09e991522ca7e64e$var$game.getStatus();\n    if (gameStatus === \"playing\") return;\n    document.removeEventListener(\"keydown\", $09e991522ca7e64e$var$movesListener);\n    (0, $8dc80960c42854d7$export$b5210707f4c816dc).removeEventListener(\"touchstart\", (0, $9cbb1714ec9e8e06$export$37cbf11924865552));\n    (0, $8dc80960c42854d7$export$b5210707f4c816dc).removeEventListener(\"touchend\", $09e991522ca7e64e$var$touchMovesListener);\n    if (gameStatus === \"win\") {\n        $09e991522ca7e64e$var$winMessage.classList.remove(\"hidden\");\n        return;\n    }\n    $09e991522ca7e64e$var$loseMessage.classList.remove(\"hidden\");\n}\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$startButton.classList.contains(\"start\")) {\n        $09e991522ca7e64e$var$game.start();\n        (0, $8dc80960c42854d7$export$792a18290d173848)($09e991522ca7e64e$var$game.getState());\n        $09e991522ca7e64e$var$startMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$startButton.disabled = true;\n        document.addEventListener(\"keydown\", $09e991522ca7e64e$var$movesListener);\n        (0, $8dc80960c42854d7$export$b5210707f4c816dc).addEventListener(\"touchstart\", (0, $9cbb1714ec9e8e06$export$37cbf11924865552), false);\n        (0, $8dc80960c42854d7$export$b5210707f4c816dc).addEventListener(\"touchend\", $09e991522ca7e64e$var$touchMovesListener, false);\n        return;\n    }\n    $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$game.start();\n    (0, $8dc80960c42854d7$export$792a18290d173848)($09e991522ca7e64e$var$game.getState());\n    $09e991522ca7e64e$var$gameScore.textContent = \"0\";\n    if (!$09e991522ca7e64e$var$winMessage.classList.contains(\"hidden\")) $09e991522ca7e64e$var$winMessage.classList.add(\"hidden\");\n    if (!$09e991522ca7e64e$var$loseMessage.classList.contains(\"hidden\")) $09e991522ca7e64e$var$loseMessage.classList.add(\"hidden\");\n    (0, $8dc80960c42854d7$export$b5210707f4c816dc).removeEventListener(\"touchstart\", (0, $9cbb1714ec9e8e06$export$37cbf11924865552));\n    (0, $8dc80960c42854d7$export$b5210707f4c816dc).removeEventListener(\"touchend\", $09e991522ca7e64e$var$touchMovesListener);\n    (0, $8dc80960c42854d7$export$b5210707f4c816dc).addEventListener(\"touchstart\", (0, $9cbb1714ec9e8e06$export$37cbf11924865552), false);\n    (0, $8dc80960c42854d7$export$b5210707f4c816dc).addEventListener(\"touchend\", $09e991522ca7e64e$var$touchMovesListener, false);\n    document.removeEventListener(\"keydown\", $09e991522ca7e64e$var$movesListener);\n    document.addEventListener(\"keydown\", $09e991522ca7e64e$var$movesListener);\n});\n\n\n//# sourceMappingURL=index.47927967.js.map\n","import { onTouchStart, onTouchEnd } from './swipeHandler';\nimport { gameField, updateField, isChanged } from './updateField';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst gameScore = document.querySelector('.game-score');\nconst startButton = document.querySelector('.button.start');\n\nconst winMessage = document.querySelector('.message.message-win');\nconst loseMessage = document.querySelector('.message.message-lose');\nconst startMessage = document.querySelector('.message.message-start');\n\nfunction touchMovesListener(e) {\n  const result = onTouchEnd(e);\n\n  if (result) {\n    movesListener(result);\n  }\n}\n\nfunction movesListener(e) {\n  const prevState = game.getState();\n\n  switch (e.key) {\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n\n    default:\n      return;\n  }\n\n  if (\n    startButton.classList.contains('start') &&\n    isChanged(prevState, game.getState())\n  ) {\n    startButton.disabled = false;\n    startButton.textContent = 'Restart';\n\n    startButton.classList.add('restart');\n    startButton.classList.remove('start');\n  }\n\n  gameScore.textContent = game.getScore();\n  updateField(game.getState(), e.key.replace('Arrow', '').toLowerCase());\n\n  const gameStatus = game.getStatus();\n\n  if (gameStatus === 'playing') {\n    return;\n  }\n\n  document.removeEventListener('keydown', movesListener);\n\n  gameField.removeEventListener('touchstart', onTouchStart);\n  gameField.removeEventListener('touchend', touchMovesListener);\n\n  if (gameStatus === 'win') {\n    winMessage.classList.remove('hidden');\n\n    return;\n  }\n\n  loseMessage.classList.remove('hidden');\n}\n\nstartButton.addEventListener('click', () => {\n  if (startButton.classList.contains('start')) {\n    game.start();\n    updateField(game.getState());\n\n    startMessage.classList.add('hidden');\n\n    startButton.disabled = true;\n    document.addEventListener('keydown', movesListener);\n\n    gameField.addEventListener('touchstart', onTouchStart, false);\n    gameField.addEventListener('touchend', touchMovesListener, false);\n\n    return;\n  }\n\n  game.restart();\n\n  game.start();\n  updateField(game.getState());\n\n  gameScore.textContent = '0';\n\n  if (!winMessage.classList.contains('hidden')) {\n    winMessage.classList.add('hidden');\n  }\n\n  if (!loseMessage.classList.contains('hidden')) {\n    loseMessage.classList.add('hidden');\n  }\n\n  gameField.removeEventListener('touchstart', onTouchStart);\n  gameField.removeEventListener('touchend', touchMovesListener);\n\n  gameField.addEventListener('touchstart', onTouchStart, false);\n  gameField.addEventListener('touchend', touchMovesListener, false);\n\n  document.removeEventListener('keydown', movesListener);\n  document.addEventListener('keydown', movesListener);\n});\n","let startX, startY, endX, endY;\nconst minDistance = 15;\n\nexport function onTouchStart(e) {\n  e.preventDefault();\n\n  const touch = e.touches[0];\n\n  startX = touch.pageX;\n  startY = touch.pageY;\n}\n\nexport function onTouchEnd(e) {\n  const touch = e.changedTouches[0];\n\n  endX = touch.pageX;\n  endY = touch.pageY;\n\n  const deltaX = endX - startX;\n  const deltaY = endY - startY;\n\n  if (Math.abs(deltaX) > Math.abs(deltaY)) {\n    if (deltaX > minDistance) {\n      e.key = 'ArrowRight';\n\n      return e;\n    }\n\n    if (deltaX < -minDistance) {\n      e.key = 'ArrowLeft';\n\n      return e;\n    }\n  }\n\n  if (deltaY > minDistance) {\n    e.key = 'ArrowDown';\n\n    return e;\n  }\n\n  if (deltaY < -minDistance) {\n    e.key = 'ArrowUp';\n\n    return e;\n  }\n}\n","export const gameField = document.querySelector('.game-field tbody');\n\nconst DIRECTIONS = {\n  left: (prevState, state) => moveLeft(prevState, state),\n  right: (prevState, state) => moveRight(prevState, state),\n  up: (prevState, state) => moveUp(prevState, state),\n  down: (prevState, state) => moveDown(prevState, state),\n};\n\nlet lastChange = null;\nlet lastTimeout = null;\n\nconst ANIMATION_DURATION = 250;\n// const ANIMATION_DURATION = 5000;\n\nexport function updateField(state, direction) {\n  if (lastChange) {\n    if (!isChanged(lastChange, state)) {\n      return;\n    }\n\n    clearTimeout(lastTimeout);\n\n    clearField();\n    fillField(lastChange);\n\n    lastChange = null;\n    lastTimeout = null;\n  }\n\n  const changes = [createCopy(clearField())];\n\n  if (!isChanged(changes[0], state)) {\n    fillField(state);\n\n    return;\n  }\n\n  if (direction) {\n    while (true) {\n      changes.push(\n        createCopy(DIRECTIONS[direction](createCopy(changes.at(-1)), state)),\n      );\n\n      if (!isChanged(changes.at(-1), changes.at(-2))) {\n        changes.pop();\n        changes.shift();\n\n        changes[changes.length - 1] = state;\n\n        break;\n      }\n    }\n\n    lastChange = state;\n    addChanges(changes, ANIMATION_DURATION / changes.length);\n\n    return;\n  }\n\n  fillField(state);\n}\n\nexport function isChanged(prevState, state) {\n  for (let i = 0; i < prevState.length; i++) {\n    for (let j = 0; j < prevState[i].length; j++) {\n      if (prevState[i][j] !== state[i][j]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction createCopy(state) {\n  return state.map((row) => [...row]);\n}\n\nfunction addChanges(changes, duration) {\n  clearField();\n  fillField(changes.shift());\n\n  if (changes.length) {\n    lastTimeout = setTimeout(addChanges, duration, changes, duration);\n\n    return;\n  }\n\n  lastChange = null;\n  lastTimeout = null;\n}\n\nfunction fillField(state) {\n  for (let i = 0; i < state.length; i++) {\n    const row = state[i];\n\n    for (let j = 0; j < row.length; j++) {\n      if (state[i][j]) {\n        gameField.rows[i].cells[j].textContent = state[i][j];\n        gameField.rows[i].cells[j].classList.add(`field-cell--${state[i][j]}`);\n      }\n    }\n  }\n}\n\nfunction moveLeft(prevState, state) {\n  for (let i = 0; i < prevState.length; i++) {\n    const row = prevState[i];\n    const end = row.length - 1;\n\n    let count = 0;\n    let next = false;\n\n    for (let j = 0; j < end && !next; j++) {\n      if (j === count && row[j] === state[i][j]) {\n        count++;\n        continue;\n      }\n\n      if (!row[j]) {\n        next = true;\n\n        row.splice(j, 1);\n        row.push(0);\n\n        continue;\n      }\n\n      if (row[j + 1] && row[j] === row[j + 1]) {\n        next = true;\n\n        row[j] = +row[j] * 2;\n\n        row.splice(j + 1, 1);\n        row.push(0);\n      }\n    }\n  }\n\n  return prevState;\n}\n\nfunction moveRight(prevState, state) {\n  for (let i = 0; i < prevState.length; i++) {\n    const row = prevState[i];\n\n    let next = false;\n    let count = row.length - 1;\n\n    for (let j = row.length - 1; j > 0 && !next; j--) {\n      if (j === count && row[j] === state[i][j]) {\n        count--;\n        continue;\n      }\n\n      if (!row[j]) {\n        next = true;\n\n        row.splice(j, 1);\n        row.unshift(0);\n\n        continue;\n      }\n\n      if (row[j - 1] && row[j] === row[j - 1]) {\n        next = true;\n\n        row[j] = +row[j] * 2;\n\n        row.splice(j - 1, 1);\n        row.unshift(0);\n      }\n    }\n  }\n\n  return prevState;\n}\n\nfunction moveUp(prevState, state) {\n  for (let j = 0; j < prevState.length; j++) {\n    const end = prevState.length - 1;\n\n    let count = 0;\n    let next = false;\n\n    for (let i = 0; i < end && !next; i++) {\n      if (i === count && prevState[i][j] === state[i][j]) {\n        count++;\n        continue;\n      }\n\n      if (!prevState[i][j]) {\n        next = true;\n        removeUp(prevState, i, j);\n\n        continue;\n      }\n\n      if (prevState[i + 1][j] && prevState[i][j] === prevState[i + 1][j]) {\n        prevState[i][j] *= 2;\n\n        next = true;\n        removeUp(prevState, i + 1, j);\n      }\n    }\n  }\n\n  return prevState;\n}\n\nfunction moveDown(prevState, state) {\n  for (let j = 0; j < prevState.length; j++) {\n    let next = false;\n    let count = prevState.length - 1;\n\n    for (let i = prevState.length - 1; i > 0 && !next; i--) {\n      if (count === i && prevState[i][j] === state[i][j]) {\n        count--;\n        continue;\n      }\n\n      if (!prevState[i][j]) {\n        next = true;\n        removeDown(prevState, i, j);\n\n        continue;\n      }\n\n      if (prevState[i - 1][j] && prevState[i][j] === prevState[i - 1][j]) {\n        prevState[i][j] = +prevState[i][j] * 2;\n\n        next = true;\n        removeDown(prevState, i - 1, j);\n      }\n    }\n  }\n\n  return prevState;\n}\n\nfunction removeUp(prevState, init, j) {\n  const end = prevState.length - 1;\n\n  for (let i = init; i < end; i++) {\n    prevState[i][j] = prevState[i + 1][j];\n  }\n\n  prevState[end][j] = 0;\n}\n\nfunction removeDown(prevState, init, j) {\n  for (let i = init; i > 0; i--) {\n    prevState[i][j] = prevState[i - 1][j];\n  }\n\n  prevState[0][j] = 0;\n}\n\nfunction clearField() {\n  const state = [];\n\n  for (let i = 0; i < gameField.rows.length; i++) {\n    state.push([]);\n\n    const row = gameField.rows[i].cells;\n\n    for (let j = 0; j < row.length; j++) {\n      state[i].push(+row[j].textContent);\n\n      if (row[j].textContent) {\n        row[j].classList.remove(`field-cell--${row[j].textContent}`);\n        row[j].textContent = '';\n      }\n    }\n  }\n\n  return state;\n}\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  size = 4;\n  probability = 10;\n\n  status = {\n    started: false,\n    lost: false,\n    won: false,\n  };\n\n  score = 0;\n\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState = this.createField()) {\n    this.state = initialState;\n    this.initialState = this.copyState(initialState);\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    if (this.isPlaying) {\n      return;\n    }\n\n    this.status.started = true;\n\n    for (let _ = 0; _ < 2; _++) {\n      this.addRandomCell();\n    }\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.score = 0;\n    this.state = this.copyState(this.initialState);\n\n    this.status.won = false;\n    this.status.lost = false;\n    this.status.started = false;\n  }\n\n  // #region moves logic\n  moveRow(callback) {\n    if (!this.isPlaying) {\n      return;\n    }\n\n    const prevState = this.getState();\n\n    for (let i = 0; i < this.size; i++) {\n      this.state[i] = this.stackRow(this.state[i], callback);\n    }\n\n    if (this.isChanged(prevState)) {\n      this.addRandomCell();\n      this.status.lost = this.isLost;\n    }\n  }\n\n  moveColumn(callback) {\n    if (!this.isPlaying) {\n      return;\n    }\n\n    const prevState = this.getState();\n\n    for (let j = 0; j < this.size; j++) {\n      const column = this.stackRow(\n        this.state.map((row) => row[j]),\n        callback,\n      );\n\n      column.forEach((cell, i) => (this.state[i][j] = cell));\n    }\n\n    if (this.isChanged(prevState)) {\n      this.addRandomCell();\n      this.status.lost = this.isLost;\n    }\n  }\n\n  stackRow(initialRow, fillCallback) {\n    const row = initialRow.filter(Boolean);\n\n    for (let j = 1; j < row.length; j++) {\n      if (row[j - 1] === row[j]) {\n        const score = row[j - 1] * 2;\n\n        if (score === 2048) {\n          this.status.won = true;\n        }\n\n        row[j - 1] = score;\n        this.score += score;\n\n        row.splice(j, 1);\n      }\n    }\n\n    while (row.length !== this.size) {\n      fillCallback(row);\n    }\n\n    return row;\n  }\n  // #endregion\n\n  // #region moves directions\n  moveLeft() {\n    this.moveRow((row) => row.push(0));\n  }\n\n  moveRight() {\n    this.moveRow((row) => row.unshift(0));\n  }\n\n  moveUp() {\n    this.moveColumn((column) => column.push(0));\n  }\n\n  moveDown() {\n    this.moveColumn((column) => column.unshift(0));\n  }\n  // #endregion\n\n  // #region utils\n  createField() {\n    return new Array(this.size)\n      .fill(null)\n      .map(() => new Array(this.size).fill(0));\n  }\n\n  copyState(state) {\n    return state.map((row) => [...row]);\n  }\n\n  isChanged(prevState) {\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        if (prevState[i][j] !== this.state[i][j]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  get isPlaying() {\n    switch (true) {\n      case !this.status.started:\n      case this.status.won:\n      case this.status.lost:\n        return false;\n\n      default:\n        return true;\n    }\n  }\n\n  get isLost() {\n    for (let i = 0; i < this.size; i++) {\n      const column = this.state.map((row) => row[i]);\n\n      if (this.hasMoves(this.state[i]) || this.hasMoves(column)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  hasMoves(row) {\n    if (row.includes(0)) {\n      return true;\n    }\n\n    for (let i = 1; i < row.length; i++) {\n      if (row[i - 1] === row[i]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  // #endregion\n\n  // #region add random cell\n  addRandomCell() {\n    const i = this.getRandomRow();\n    const j = this.getRandomColumn(i);\n\n    this.state[i][j] = !getRandomNumber(0, this.probability) ? 4 : 2;\n  }\n\n  getRandomRow() {\n    const rows = [];\n\n    for (let i = 0; i < this.size; i++) {\n      if (this.state[i].includes(0)) {\n        rows.push(i);\n      }\n    }\n\n    return rows[getRandomNumber(0, rows.length)];\n  }\n\n  getRandomColumn(i) {\n    const columns = [];\n    const row = this.state[i];\n\n    for (let j = 0; j < row.length; j++) {\n      if (!row[j]) {\n        columns.push(j);\n      }\n    }\n\n    return columns[getRandomNumber(0, columns.length)];\n  }\n  // #endregion\n\n  // #region getters\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.copyState(this.state);\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    switch (true) {\n      case !this.status.started:\n        return 'idle';\n\n      case this.status.won:\n        return 'win';\n\n      case this.status.lost:\n        return 'lose';\n    }\n\n    return 'playing';\n  }\n  // #endregion\n}\n\nfunction getRandomNumber(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nmodule.exports = Game;\n"],"names":["$9cbb1714ec9e8e06$var$startX","$9cbb1714ec9e8e06$var$startY","$9cbb1714ec9e8e06$var$endX","$9cbb1714ec9e8e06$var$endY","$9cbb1714ec9e8e06$export$37cbf11924865552","e","preventDefault","touch","touches","pageX","pageY","$8dc80960c42854d7$export$b5210707f4c816dc","document","querySelector","$8dc80960c42854d7$var$DIRECTIONS","left","prevState","state","$8dc80960c42854d7$var$moveLeft","i","length","row","end","count","next","j","splice","push","right","$8dc80960c42854d7$var$moveRight","unshift","up","$8dc80960c42854d7$var$moveUp","$8dc80960c42854d7$var$removeUp","down","$8dc80960c42854d7$var$moveDown","$8dc80960c42854d7$var$removeDown","$8dc80960c42854d7$var$lastChange","$8dc80960c42854d7$var$lastTimeout","$8dc80960c42854d7$export$792a18290d173848","direction","$8dc80960c42854d7$export$3a85b3f4caf02b6f","clearTimeout","$8dc80960c42854d7$var$clearField","$8dc80960c42854d7$var$fillField","changes","$8dc80960c42854d7$var$createCopy","at","pop","shift","$8dc80960c42854d7$var$addChanges","duration","setTimeout","$8dc80960c42854d7$var$ANIMATION_DURATION","map","rows","cells","textContent","classList","add","init","remove","$a5fd07fa01589658$var$getRandomNumber","min","max","Math","floor","random","$09e991522ca7e64e$var$game","size","probability","status","started","lost","won","score","constructor","initialState","createField","copyState","start","isPlaying","_","addRandomCell","restart","moveRow","callback","getState","stackRow","isChanged","isLost","moveColumn","column","forEach","cell","initialRow","fillCallback","filter","Boolean","moveLeft","moveRight","moveUp","moveDown","Array","fill","hasMoves","includes","getRandomRow","getRandomColumn","columns","getScore","getStatus","$09e991522ca7e64e$var$gameScore","$09e991522ca7e64e$var$startButton","$09e991522ca7e64e$var$winMessage","$09e991522ca7e64e$var$loseMessage","$09e991522ca7e64e$var$startMessage","$09e991522ca7e64e$var$touchMovesListener","result","changedTouches","deltaX","deltaY","abs","key","$09e991522ca7e64e$var$movesListener","contains","disabled","replace","toLowerCase","gameStatus","removeEventListener","addEventListener"],"version":3,"file":"index.47927967.js.map"}